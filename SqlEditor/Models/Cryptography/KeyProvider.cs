namespace SqlEditor.Models.Cryptography
{
    using System.Security.Cryptography;
    using System.Text;

    /// <summary>
    /// The cryptographic secret key available for the
    /// duration of the app pool.
    /// </summary>
    public class KeyProvider
    {
        /// <summary>
        /// Backing field for the cryptographic secret key.
        /// </summary>
        private static byte[] secretKey;

        /// <summary>
        /// Gets a cryptographic secret key.
        /// </summary>
        public static byte[] GetSecretKey
        {
            get
            {
                if (secretKey != null)
                {
                    return secretKey;
                }

                using (var aes = new AesCryptoServiceProvider())
                {
                    secretKey = aes.Key;
                }

                return secretKey;
            }
        }

        /// <summary>
        /// Gets a user specific secret key based off of the 
        /// user specified partial key and the application generated secret key.
        /// </summary>
        /// <param name="userKey">The secret key that is generated by the client/user.</param>
        /// <returns>A combination key based of a user key and the application key.</returns>
        public static byte[] GetUserSpecificSecretKey(string userKey)
        {
            var key = GetSecretKey;
            var userKeyEncoded = Encoding.UTF8.GetBytes(userKey);
            for (var i = 0; i < GetSecretKey.Length / 2 && i < userKeyEncoded.Length; i++)
            {
                key[i] = userKeyEncoded[i];
            }

            return key;
        }
    }
}